version: '3.8'

services:
  ultra-pinnacle-studio:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - ./models:/app/models:ro
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./encyclopedia:/app/encyclopedia:ro
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ultra-pinnacle-network

  # Optional: PostgreSQL for production persistence
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ultra_pinnacle
      POSTGRES_USER: ai_studio
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    profiles:
      - production
    networks:
      - ultra-pinnacle-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    profiles:
      - production
    networks:
      - ultra-pinnacle-network

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - ultra-pinnacle-studio
    profiles:
      - production
    networks:
      - ultra-pinnacle-network

volumes:
  postgres_data:
  redis_data:

networks:
  ultra-pinnacle-network:
    driver: bridge